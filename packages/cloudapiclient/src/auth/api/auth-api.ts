/* tslint:disable */
/* eslint-disable */
/**
 * Angelfish API
 * Authentication APIs to provide secure access to Angelfish services
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
import type { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  createRequestFunction,
  serializeDataIfNeeded,
  setBearerAuthToObject,
  setSearchParams,
  toPathString,
} from '../common'
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap, type RequestArgs } from '../base'
// @ts-ignore
import type { AuthenticationRequest } from '../models'
// @ts-ignore
import type { GetOOBCode200Response } from '../models'
// @ts-ignore
import type { GetOOBCodeRequest } from '../models'
// @ts-ignore
import type { Logout200Response } from '../models'
// @ts-ignore
import type { RefreshTokenRequest } from '../models'
// @ts-ignore
import type { TokenResponse } from '../models'
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Authenticate a user and return a JWT Token if successful
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate: async (
      authenticationRequest?: AuthenticationRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/authenticate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        authenticationRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get an Out-of-Band Code. Returns session ID and sends an email with the code
     * @param {GetOOBCodeRequest} [getOOBCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOOBCode: async (
      getOOBCodeRequest?: GetOOBCodeRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/oob`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOOBCodeRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Log out a user and delete any refresh tokens. This will log a user out of any devices and sessions once their current JWT token expires
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/logout`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Refresh user\'s authentication using a refresh token
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: async (
      refreshTokenRequest?: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/refresh`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Authenticate a user and return a JWT Token if successful
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authenticate(
      authenticationRequest?: AuthenticationRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(
        authenticationRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authenticate']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get an Out-of-Band Code. Returns session ID and sends an email with the code
     * @param {GetOOBCodeRequest} [getOOBCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOOBCode(
      getOOBCodeRequest?: GetOOBCodeRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOOBCode200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOOBCode(
        getOOBCodeRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.getOOBCode']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Log out a user and delete any refresh tokens. This will log a user out of any devices and sessions once their current JWT token expires
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Logout200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.logout']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Refresh user\'s authentication using a refresh token
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refreshToken(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(
        refreshTokenRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary Authenticate a user and return a JWT Token if successful
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(
      authenticationRequest?: AuthenticationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TokenResponse> {
      return localVarFp
        .authenticate(authenticationRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get an Out-of-Band Code. Returns session ID and sends an email with the code
     * @param {GetOOBCodeRequest} [getOOBCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOOBCode(
      getOOBCodeRequest?: GetOOBCodeRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetOOBCode200Response> {
      return localVarFp
        .getOOBCode(getOOBCodeRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Log out a user and delete any refresh tokens. This will log a user out of any devices and sessions once their current JWT token expires
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: RawAxiosRequestConfig): AxiosPromise<Logout200Response> {
      return localVarFp.logout(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Refresh user\'s authentication using a refresh token
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TokenResponse> {
      return localVarFp
        .refreshToken(refreshTokenRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Authenticate a user and return a JWT Token if successful
   * @param {AuthenticationRequest} [authenticationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authenticate(
    authenticationRequest?: AuthenticationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authenticate(authenticationRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get an Out-of-Band Code. Returns session ID and sends an email with the code
   * @param {GetOOBCodeRequest} [getOOBCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public getOOBCode(getOOBCodeRequest?: GetOOBCodeRequest, options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .getOOBCode(getOOBCodeRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Log out a user and delete any refresh tokens. This will log a user out of any devices and sessions once their current JWT token expires
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public logout(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Refresh user\'s authentication using a refresh token
   * @param {RefreshTokenRequest} [refreshTokenRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public refreshToken(refreshTokenRequest?: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .refreshToken(refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
