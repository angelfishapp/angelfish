/* tslint:disable */
/* eslint-disable */
/**
 * Angelfish Data API
 * APIs to provide data for Angelfish
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { Currency } from '../models'
// @ts-ignore
import type { CurrencyCodes } from '../models'
// @ts-ignore
import type { HistoricalCurrencyExchangeRates } from '../models'
// @ts-ignore
import type { LatestCurrencyExchangeRates } from '../models'
/**
 * CurrenciesApi - axios parameter creator
 * @export
 */
export const CurrenciesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary List all available currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v1/currencies`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get the latest exchange rates for a list of currencies
     * @param {Array<CurrencyCodes>} currencies The list of Currencies to get the exchange rates for
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyLatestRates: async (
      currencies: Array<CurrencyCodes>,
      base?: CurrencyCodes,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'currencies' is not null or undefined
      assertParamExists('getCurrencyLatestRates', 'currencies', currencies)
      const localVarPath = `/v1/currencies/latest`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (currencies) {
        localVarQueryParameter['currencies'] = currencies
      }

      if (base !== undefined) {
        for (const [key, value] of Object.entries(base)) {
          localVarQueryParameter[key] = value
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get all the Exchange Rates for a Currency from START_DATE to END_DATE
     * @param {CurrencyCodes} currency The ISO 4217 code for the Currency
     * @param {string} startDate The YYYY-MM-DD start date to get the exchange rates from
     * @param {string} [endDate] The YYYY-MM-DD end date to get the exchange rates to, defaults to the current date
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyRates: async (
      currency: CurrencyCodes,
      startDate: string,
      endDate?: string,
      base?: CurrencyCodes,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'currency' is not null or undefined
      assertParamExists('getCurrencyRates', 'currency', currency)
      // verify required parameter 'startDate' is not null or undefined
      assertParamExists('getCurrencyRates', 'startDate', startDate)
      const localVarPath = `/v1/currencies/{currency}`.replace(
        `{${'currency'}}`,
        encodeURIComponent(String(currency)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] = startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] = endDate
      }

      if (base !== undefined) {
        for (const [key, value] of Object.entries(base)) {
          localVarQueryParameter[key] = value
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CurrenciesApi - functional programming interface
 * @export
 */
export const CurrenciesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CurrenciesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary List all available currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrencies(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Currency>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencies(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CurrenciesApi.getCurrencies']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get the latest exchange rates for a list of currencies
     * @param {Array<CurrencyCodes>} currencies The list of Currencies to get the exchange rates for
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrencyLatestRates(
      currencies: Array<CurrencyCodes>,
      base?: CurrencyCodes,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LatestCurrencyExchangeRates>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencyLatestRates(
        currencies,
        base,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CurrenciesApi.getCurrencyLatestRates']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get all the Exchange Rates for a Currency from START_DATE to END_DATE
     * @param {CurrencyCodes} currency The ISO 4217 code for the Currency
     * @param {string} startDate The YYYY-MM-DD start date to get the exchange rates from
     * @param {string} [endDate] The YYYY-MM-DD end date to get the exchange rates to, defaults to the current date
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrencyRates(
      currency: CurrencyCodes,
      startDate: string,
      endDate?: string,
      base?: CurrencyCodes,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoricalCurrencyExchangeRates>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencyRates(
        currency,
        startDate,
        endDate,
        base,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CurrenciesApi.getCurrencyRates']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * CurrenciesApi - factory interface
 * @export
 */
export const CurrenciesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CurrenciesApiFp(configuration)
  return {
    /**
     *
     * @summary List all available currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencies(options?: RawAxiosRequestConfig): AxiosPromise<Array<Currency>> {
      return localVarFp.getCurrencies(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get the latest exchange rates for a list of currencies
     * @param {Array<CurrencyCodes>} currencies The list of Currencies to get the exchange rates for
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyLatestRates(
      currencies: Array<CurrencyCodes>,
      base?: CurrencyCodes,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<LatestCurrencyExchangeRates> {
      return localVarFp
        .getCurrencyLatestRates(currencies, base, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get all the Exchange Rates for a Currency from START_DATE to END_DATE
     * @param {CurrencyCodes} currency The ISO 4217 code for the Currency
     * @param {string} startDate The YYYY-MM-DD start date to get the exchange rates from
     * @param {string} [endDate] The YYYY-MM-DD end date to get the exchange rates to, defaults to the current date
     * @param {CurrencyCodes} [base] The base Currency to convert from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyRates(
      currency: CurrencyCodes,
      startDate: string,
      endDate?: string,
      base?: CurrencyCodes,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<HistoricalCurrencyExchangeRates> {
      return localVarFp
        .getCurrencyRates(currency, startDate, endDate, base, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CurrenciesApi - object-oriented interface
 * @export
 * @class CurrenciesApi
 * @extends {BaseAPI}
 */
export class CurrenciesApi extends BaseAPI {
  /**
   *
   * @summary List all available currencies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CurrenciesApi
   */
  public getCurrencies(options?: RawAxiosRequestConfig) {
    return CurrenciesApiFp(this.configuration)
      .getCurrencies(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get the latest exchange rates for a list of currencies
   * @param {Array<CurrencyCodes>} currencies The list of Currencies to get the exchange rates for
   * @param {CurrencyCodes} [base] The base Currency to convert from
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CurrenciesApi
   */
  public getCurrencyLatestRates(
    currencies: Array<CurrencyCodes>,
    base?: CurrencyCodes,
    options?: RawAxiosRequestConfig,
  ) {
    return CurrenciesApiFp(this.configuration)
      .getCurrencyLatestRates(currencies, base, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get all the Exchange Rates for a Currency from START_DATE to END_DATE
   * @param {CurrencyCodes} currency The ISO 4217 code for the Currency
   * @param {string} startDate The YYYY-MM-DD start date to get the exchange rates from
   * @param {string} [endDate] The YYYY-MM-DD end date to get the exchange rates to, defaults to the current date
   * @param {CurrencyCodes} [base] The base Currency to convert from
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CurrenciesApi
   */
  public getCurrencyRates(
    currency: CurrencyCodes,
    startDate: string,
    endDate?: string,
    base?: CurrencyCodes,
    options?: RawAxiosRequestConfig,
  ) {
    return CurrenciesApiFp(this.configuration)
      .getCurrencyRates(currency, startDate, endDate, base, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
