import type { BrowserWindow } from 'electron'
import { app } from 'electron'
import path from 'path'

import { AppProcessIDs } from '@angelfish/core'
import { MIN_WINDOW_HEIGHT, MIN_WINDOW_WIDTH, settings } from '../settings'
import { WindowManager } from './windows-manager'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const APP_WINDOW_WEBPACK_ENTRY: string
declare const WORKER_WINDOW_WEBPACK_ENTRY: string
declare const SYNC_WORKER_WEBPACK_ENTRY: string

/**
 * Create all the windows for the application.
 */
export function createWindows() {
  if (!WindowManager.has(AppProcessIDs.WORKER)) {
    // Create Worker Window
    WindowManager.createProcessWindow({
      id: AppProcessIDs.WORKER,
      url: WORKER_WINDOW_WEBPACK_ENTRY,
      nodeIntegration: true,
      directIPCChannel: true,
    })
  }

  if (!WindowManager.has(AppProcessIDs.SYNC)) {
    // Create Sync Worker Window
    WindowManager.createProcessWindow({
      id: AppProcessIDs.SYNC,
      url: SYNC_WORKER_WEBPACK_ENTRY,
      allowedDomains: ['https://api.angelfish.app', 'https://auth.angelfish.app'],
    })
  }

  if (!WindowManager.has(AppProcessIDs.APP)) {
    // Create App Window
    createMainAppWindow()
  }
}

/**
 * Create the main application window.
 *
 * @returns   The new {BrowserWindow}
 */
function createMainAppWindow(): BrowserWindow {
  const windowSize = settings.get('windowSize')
  const appWindow = WindowManager.createRendererWindow({
    id: AppProcessIDs.APP,
    url: APP_WINDOW_WEBPACK_ENTRY,
    title: 'Angelfish',
    width: windowSize.width,
    height: windowSize.height,
  })
  appWindow.setMinimumSize(MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT)
  appWindow.setIcon(path.join(__dirname, 'assets', '1024.png'))

  // Listen for resize events to remember user's last screen size
  appWindow.on('resize', function () {
    const size = appWindow.getSize()
    settings.set('windowSize', {
      width: size[0],
      height: size[1],
    })
  })

  // Handle MacOS activation to maximize window if minimized
  const maximizeWindow = () => {
    if (appWindow && !appWindow.isDestroyed()) {
      if (appWindow.isMinimized()) {
        appWindow.restore()
      }
      appWindow.show()
      appWindow.focus()
    }
  }
  app.on('activate', maximizeWindow)
  appWindow.on('closed', () => app.removeListener('activate', maximizeWindow))

  return appWindow
}
