import type { BrowserWindow } from 'electron'
import path from 'path'

import { MIN_WINDOW_HEIGHT, MIN_WINDOW_WIDTH, settings } from '../settings'
import { ProcessIDs } from './process-ids'
import { WindowManager } from './windows-manager'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const APP_WINDOW_WEBPACK_ENTRY: string
declare const WORKER_WINDOW_WEBPACK_ENTRY: string
declare const SYNC_WORKER_WEBPACK_ENTRY: string

/**
 * Create all the windows for the application.
 */
export function createWindows() {
  if (!WindowManager.has(ProcessIDs.WORKER)) {
    // Create Worker Window
    WindowManager.createProcessWindow(ProcessIDs.WORKER, WORKER_WINDOW_WEBPACK_ENTRY, true, true)
  }

  if (!WindowManager.has(ProcessIDs.SYNC)) {
    // Create Sync Worker Window
    WindowManager.createProcessWindow(ProcessIDs.SYNC, SYNC_WORKER_WEBPACK_ENTRY)
  }

  if (!WindowManager.has(ProcessIDs.APP)) {
    // Create App Window
    createMainAppWindow()
  }
}

/**
 * Create the main application window.
 *
 * @returns   The new {BrowserWindow}
 */
function createMainAppWindow(): BrowserWindow {
  const windowSize = settings.get('windowSize')
  const appWindow = WindowManager.createRendererWindow(
    ProcessIDs.APP,
    APP_WINDOW_WEBPACK_ENTRY,
    windowSize.width,
    windowSize.height,
  )
  appWindow.setTitle('Angelfish')
  appWindow.setMinimumSize(MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT)
  appWindow.setIcon(path.join(__dirname, 'assets', '1024.png'))

  // Listen for resize events to remember user's last screen size
  appWindow.on('resize', function () {
    const size = appWindow.getSize()
    settings.set('windowSize', {
      width: size[0],
      height: size[1],
    })
  })

  return appWindow
}
